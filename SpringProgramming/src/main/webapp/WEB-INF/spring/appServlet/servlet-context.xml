<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/mvc"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
	xmlns:beans="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context.xsd">

	<!-- DispatcherServlet Context: defines this servlet's request-processing 
		infrastructure -->

	<!-- Enables the Spring MVC @Controller programming model -->
	<annotation-driven />	<!-- 어노테이션을 사용해서 객체의 역할을 부여하겠다 -->
							<!-- 이게 있어야만 패키지 안에서 어노테이션을 통해 컨트롤러를 찾을 수 있다. -->

	<!-- Handles HTTP GET requests for /resources/** by efficiently serving 
		up static resources in the ${webappRoot}/resources directory -->
	<resources mapping="/resources/**" location="/resources/" />	<!-- URL로 접근 가능한 위치를 매핑, 이게 있으면 DispatcherServlet을 거치지 않고 바로 resources 폴더로 간다-->

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources 
		in the /WEB-INF/views directory -->
	<beans:bean
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">	<!-- 이게 없으면 jsp파일을 못 찾는다. -->
		<beans:property name="prefix" value="/WEB-INF/views/" />
		<beans:property name="suffix" value=".jsp" />
	</beans:bean>

	<context:component-scan base-package="com.mycompany.myapp" />	<!-- 컴포넌트(스프링이 관리해야할 객체/ ex.컨트롤러)를 지정한 패키지 내 어디에 있든 하나 하나 다 찾아서 사용하겠다 -->
																	<!-- 어노테이션을 통해 컴포넌트인지 아닌지 구분한다(@Controller가 붙은 놈은 다 찾는다) -->
	<!-- A를 관리 객체로 생성  -->
	<beans:bean name="a" class="com.mycompany.myapp.exam09.A"/>			<!-- 반드시 저 패키지 안에 있어야만 찾을 수 있다. -->
	
	<!-- B를 관리 객체로 생성  -->
	<beans:bean name="b" class="com.mycompany.myapp.exam09.B"/>
	
	<!-- ServiceA를 관리 객체로 생성  -->
	<beans:bean name="serviceA" class="com.mycompany.myapp.exam09.ServiceA"/>

	<!-- ServiceB를 관리 객체로 생성  -->
	<beans:bean name="serviceB" class="com.mycompany.myapp.exam09.ServiceB"/>
	
	<!-- ServiceCImpl1 를 관리 객체로 생성  -->
	<beans:bean name="serviceCImpl1" class="com.mycompany.myapp.exam09.ServiceCImpl2"/>
	<beans:bean name="serviceDImpl1" class="com.mycompany.myapp.exam09.ServiceDImpl1"/>
	
	<!-- C를 관리 객체로 생성 -->
	<beans:bean name="c" class="com.mycompany.myapp.exam09.C">
		<beans:constructor-arg ref="d"/>
	</beans:bean>
	
	<!-- D를 관리 객체로 생성 -->
	<beans:bean name="d" class="com.mycompany.myapp.exam09.D"/>
	
	<beans:bean name="e" class="com.mycompany.myapp.exam09.E">
		<beans:constructor-arg ref="b"/>
		<beans:constructor-arg ref="d"/>
	</beans:bean>
	
	<beans:bean name="f" class="com.mycompany.myapp.exam09.F">
		<beans:constructor-arg ref="serviceA"/>
		<beans:constructor-arg ref="serviceB"/>
		<beans:constructor-arg ref="serviceCImpl1"/>
	</beans:bean>
	
	
	<!-- Exam09Controller 객체를 찾아서 가져오기  -->
	<beans:bean name="exam09Controller" class="com.mycompany.myapp.exam09.Exam09Controller">
		<!-- Setter 주입
		<beans:property name="setter이름" ref="매개값으로 전달할 객체(관리객체이름)"/> 
		-->
		<beans:property name="b" ref="b" />
		<beans:property name="a" ref="a" />
		<beans:property name="serviceA" ref="serviceA" />
		<beans:property name="serviceB" ref="serviceB" />
		<beans:property name="serviceC" ref="serviceCImpl1" />
		<beans:property name="serviceD" ref="serviceDImpl1" />
		<beans:property name="c" ref="c" />
		<beans:property name="e" ref="e" />
		<beans:property name="f" ref="f" />
		
	</beans:bean>
</beans:beans>
